# MAP
map4x4=[[0, 0, 1, 1],
        [0, 0, 0, 1],
        [0, 1, 0, 0],
        [0, 1, 1, 0]]
      
map3x4=[[0, 0, 1, 1],
        [0, 0, 0, 1],
        [0, 1, 0, 0]]
        
map9x9=[[0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
        [1, 1, 0, 0, 0, 0, 0, 1, 0, 1],
        [1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 1, 1, 1, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 0, 1, 1],
        [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]]

# CHOOSE MAP
MAP:list[list[int]]=map3x4 # ONLY EDIT THIS
print(MAP)

print(MAP[0])

# DIMENSIONS
temp:list[int]=(MAP[0])
map_width=len(temp)
map_height=len(MAP)
blocked=brown
free=darkgreen
route=blue

# INIT MAP
canvas(0, 0, map_width, map_height)
resolution(map_width, map_height)
noupdate()
for x in range(map_width):
    for y in range(map_height):
        if (MAP[x][y]):
            pixset(y, x, blocked)
        else:
            pixset(y, x, free)
update()

# MAP VARS
start_x=0
start_y=0
end_x=map_height-1
end_y=map_width-1

# MAP LISTS
path: list[list[int]] = []
visited: list[list[int]] = []
came_from: list[list[int]] = []
found=False

# DFS
counter=0
def dfs(x:int, y:int, end_x:int, end_y:int, map:list[list[int]]):
    counter+=1
    print("dfs call:",counter)
    # check if the current position is the destination
    if (x == end_x) and (y == end_y):
        return True
        
    # directions to move: right, down, left, up
    directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]
    for coord in directions:
        nx =(x + coord[0]) 
        ny =(y + coord[1]) # adjacent coordinate
        if is_valid(nx, ny, map) and not is_visited(nx, ny):  # check if within bounds and not blocked
            visited.append([nx, ny])
            if (dfs(nx, ny, end_x, end_y, map)):
                return True
            visited.remove([nx, ny])
            path.append([nx, ny])
        else:
            continue

# Checks if cell is visited
def is_visited(x, y):
    coord:list[int]=[x,y]
    if(coord in visited):
        return True
    else:
        return False

# Drawing the path on the Turtle System
def draw_path(path:list[list[int]]):
    for coord in path:
        x=coord[0]
        y=coord[1]
        pixset(x, y, route)  # set path color
        
# Helper function to check whether block is available
def is_valid(x, y, map):
    if (x < 0) or (x >= map_width) or (y < 0) or (y >= map_height):
        return False
    elif (map[x][y]):
        return False
    elif (not([x, y]) in visited):
        return False
    else:
        return True
      
# Start DFS from the entrance

visited.append([start_x, start_y])
found = dfs(start_x, start_y, end_x, end_y, MAP)
path.append([start_x, start_y])

# Reconstruct the path in order
if found:
    # path.reverse()
    print("Path found:", path)
    print("Visited: ", visited)
    print("yippie!")
else:
    print("No path found")

